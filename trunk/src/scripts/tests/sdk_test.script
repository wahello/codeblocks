Include(_("test_base.script"));

class sdkTest extends script_test_base
{
    function Run()
    {
        clear_global_test_results()
        ::print("======= Test SDK function BEGINN ======= \n");
        test_replace_macros();
        test_globals();
        test_classes();
        ::print("======= Test SDK function END ======= \n");
        print_global_test_result();
    }

    function test_replace_macros()
    {
        ::print("======= Test ReplaceMacros function BEGINN ======= \n");
        clear_test_result();
        test_string("no replacing", ReplaceMacros(_("test")), "test");
        print(_("Open an editor to test"));
        local testEditor = GetEditorManager().New(_("test.ext"));
        testEditor.SetText(_("Line1\nLine2\nLine3"));
        test_string("active line", ReplaceMacros(_("$(ACTIVE_EDITOR_LINE)")),_("1"));
        test_string("editor name", ReplaceMacros(_("$(ACTIVE_EDITOR_STEM)")),_("test"));
        test_string("editor name extension", ReplaceMacros(_("$(ACTIVE_EDITOR_EXT)")),_("ext"));

        test_string("if true", ReplaceMacros(_("$if(true){true}{false}")),_("true"));
        test_string("if 1", ReplaceMacros(_("$if(1){true}{false}")),_("true"));
        test_string("if 1==1", ReplaceMacros(_("$if(1==1){true}{false}")),_("true"));
        test_string("if false", ReplaceMacros(_("$if(false){true}{false}")),_("false"));
        test_string("if 0", ReplaceMacros(_("$if(0){true}{false}")),_("false"));
        test_string("if 1==0", ReplaceMacros(_("$if(1==0){true}{false}")),_("false"));

        test_string("if test==test", ReplaceMacros(_("$if(test==test){true}{false}")),_("true"));
        test_string("if tes<test", ReplaceMacros(_("$if(tes<test){true}{false}")),_("true"));
        test_string("if 1>0", ReplaceMacros(_("$if(1>0){true}{false}")),_("true"));
        test_string("if 1<0", ReplaceMacros(_("$if(1<0){true}{false}")),_("false"));

        test_string("if [[print(_(\"true\"))]]", ReplaceMacros(_("$if([[print(_(\"true\"))]]){true}{false}")),_("true"));
        test_string("if [[print(_(\"false\"))]]", ReplaceMacros(_("$if([[print(_(\"false\"))]]){true}{false}")),_("false"));
        test_string("if [[print(_(\"FALSE\"))]]", ReplaceMacros(_("$if([[print(_(\"FALSE\"))]]){true}{false}")),_("false"));
        test_string("if [[print(_(\"0\"))]]", ReplaceMacros(_("$if([[print(_(\"0\"))]]){true}{false}")),_("false"));

        test_string("if [[print(_(\"1==0\"))]]", ReplaceMacros(_("$if([[print(_(\"1==0\"))]]){true}{false}")),_("false"));
        test_string("if [[print(_(\"1==1\"))]]", ReplaceMacros(_("$if([[print(_(\"1==1\"))]]){true}{false}")),_("true"));
        local testStr = " PS1=\"\\(awk '/MemFree/{print \\\" \\2}' \\\" /proc/meminfo) prompt > \"";
        print(_("bash escape string: \"" + testStr + "\""));
        test_string("bash escaping 1.1", ReplaceMacros(_("$if(true){" + testStr + "}{false}")),_(testStr));
        test_string("bash escaping 1.2", ReplaceMacros(_("$if(false){" + testStr + "}{false}")),_("false"));
        testStr = " echo \"I'd say: \\\"Go for it!\\\"\"\"";
        print(_("bash escape string: \"" + testStr + "\""));
        test_string("bash escaping 2.1", ReplaceMacros(_("$if(true){" + testStr + "}{false}")),_(testStr));
        test_string("bash escaping 2.2", ReplaceMacros(_("$if(false){" + testStr + "}{false}")),_("false"));

        print(_("Close the editor "));
        testEditor.Close();
        print_test_result();
        ::print("======= Test ReplaceMacros function END ======= \n");
    }

    function test_globals()
    {
        ::print("======= Test Globals function BEGINN ======= \n");
        clear_test_result();

        local arr = GetArrayFromString(_T(" item1, item2, item3"), _T(","), true);
        test_equal("GetArrayFromString count", arr.GetCount(), 3);
        test_string("GetArrayFromString item0", arr.Item(0), "item1");
        test_string("GetArrayFromString item1", arr.Item(1), "item2");
        test_string("GetArrayFromString item2", arr.Item(2), "item3");

        local strFromArr0 = GetStringFromArray(arr, _T(";"), false);
        local strFromArr1 = GetStringFromArray(arr, _T("<>"), true);
        test_string("GetStringFromArray 0", strFromArr0, "item1;item2;item3");
        test_string("GetStringFromArray 1", strFromArr1, "item1<>item2<>item3<>");

        test_equal("IsNull", IsNull(_T("")), false);
        test_string("EscapeSpaces", EscapeSpaces(_T("test  spaces")), @"test\ \ spaces");
        test_string("UnixFilename", UnixFilename(_T("\\test\\unix.file"), ::wxPATH_UNIX),
                    "/test/unix.file");

        test_equal("FileTypeOf", FileTypeOf(_T("test.cpp")), 10);
        // TODO: Check if this is actually correct
        test_string( "URLEncode", URLEncode(_T("/ test")), "%2F+test");

        test_equal("GetPlatformsFromString", GetPlatformsFromString(_T("Windows;Unix")), 2 | 4);
        test_string("GetStringFromPlatforms", GetStringFromPlatforms(2 | 4, true), "Windows;Unix;");

        print_test_result();
        ::print("======= Test Globals function END ======= \n");
    }

    function makePath(folder, name)
    {
        return folder + ::wxFILE_SEP_PATH + name
    }

    function test_classes()
    {
        ::print("======= Test SDK Classes function BEGINN ======= \n");
        clear_test_result();

        {
            local cfg = GetConfigManager();
            test_false("GetConfigManager", IsNull(cfg));

            cfg.Write(_T("/test/int"), 10);
            cfg.Write(_T("/test/bool"), false);
            cfg.Write(_T("/test/float"), 11.2);
            cfg.Write(_T("/test/string"), _T("mystr"));

            test_equal("ConfigManager int", cfg.Read(_T("/test/int"), 5), 10);
            test_equal("ConfigManager bool", cfg.Read(_T("/test/bool"), true), false);
            test_equal("ConfigManager float", cfg.Read(_T("/test/float"), 5.0), 11.2);
            test_string("ConfigManager string", cfg.Read(_T("/test/string"), _T("defstr")), "mystr");
        }

        local projectMgr = GetProjectManager();
        test_false("GetProjectManager", IsNull(projectMgr));

        // This is here to allow consequtive runs of the suite and also to prevent messing active
        // projects at the time of the start of the script.
        test_true("ProjectManager::CloseWorkspace", projectMgr.CloseWorkspace());

        local tempFolder = GetFolder(0x4);
        print(_T("TEMP folder is=") + tempFolder + _T("\n"));

        local project = projectMgr.NewProject(makePath(tempFolder, _T("NewProject.cbp")));
        test_false("ProjectManager::NewProject", IsNull(project));

        test_true("cbProject type", project instanceof cbProject);
        test_true("cbProject base0 type", project instanceof CompileTargetBase);
        test_true("cbProject base1 type", project instanceof CompileOptionsBase);

        // FIXME (squirrel) Asserts when Project -> Properties with this empty project
        // FIXME (squirrel) Asserts when Project -> Build options with this empty project

        local debugTarget = project.AddBuildTarget(_T("Debug"));
        test_false("cbProject::AddBuildTarget non null 0", IsNull(debugTarget));

        {
            // CompileOptionsBase
            test_equal("CompileOptionsBase::GetPlatforms", debugTarget.GetPlatforms(), 255);
            debugTarget.RemovePlatform(2);
            test_equal("CompileOptionsBase::RemovePlatform", debugTarget.GetPlatforms(), 255 & (~2));
            debugTarget.SetPlatforms(2);
            test_equal("CompileOptionsBase::SetPlatforms", debugTarget.GetPlatforms(), 2);
            debugTarget.AddPlatform(1);
            test_equal("CompileOptionsBase::AddPlatform", debugTarget.GetPlatforms(), 1 | 2);

            debugTarget.SetPlatforms(255);
            test_true("CompileOptionsBase::SupportsCurrentPlatform true",
                      debugTarget.SupportsCurrentPlatform());
            debugTarget.SetPlatforms(0);
            test_false("CompileOptionsBase::SupportsCurrentPlatform false",
                      debugTarget.SupportsCurrentPlatform());

            test_equal("CompileOptionsBase::GetLinkerExecutable default",
                       debugTarget.GetLinkerExecutable(), leoAutoDetect);
            debugTarget.SetLinkerExecutable(leoLinker);
            test_equal("CompileOptionsBase::SetLinkerExecutable",
                       debugTarget.GetLinkerExecutable(), leoLinker);

            {
                test_equal("CompileOptionsBase::GetLinkerOptions empty",
                           debugTarget.GetLinkerOptions().GetCount(), 0);
                debugTarget.SetLinkerOptions(GetArrayFromString(_T("-pthread;-zdef"), _T(";"), true));
                local opts = GetStringFromArray(debugTarget.GetLinkerOptions(), _T("<>"), false);
                test_string("CompileOptionsBase::SetLinkerOptions", opts, "-pthread<>-zdef");
                debugTarget.AddLinkerOption(_T("-newOpt"));
                opts = GetStringFromArray(debugTarget.GetLinkerOptions(), _T("<>"), false);
                test_string("CompileOptionsBase::AddLinkerOption", opts,
                            "-pthread<>-zdef<>-newOpt");
                debugTarget.ReplaceLinkerOption(_T("-zdef"), _T("-replaceOpt"));
                opts = GetStringFromArray(debugTarget.GetLinkerOptions(), _T("<>"), false);
                test_string("CompileOptionsBase::ReplaceLinkerOption", opts,
                            "-pthread<>-replaceOpt<>-newOpt");
                debugTarget.RemoveLinkerOption(_T("-replaceOpt"));
                opts = GetStringFromArray(debugTarget.GetLinkerOptions(), _T("<>"), false);
                test_string("CompileOptionsBase::RemoveLinkerOption", opts,
                            "-pthread<>-newOpt");
            }
            {
                test_equal("CompileOptionsBase::GetLinkLibs empty",
                           debugTarget.GetLinkLibs().GetCount(), 0);
                debugTarget.SetLinkLibs(GetArrayFromString(_T("testA;testB"), _T(";"), true));
                local opts = GetStringFromArray(debugTarget.GetLinkLibs(), _T("<>"), false);
                test_string("CompileOptionsBase::SetLinkerOptions", opts, "testA<>testB");
                debugTarget.AddLinkLib(_T("testNew"));
                opts = GetStringFromArray(debugTarget.GetLinkLibs(), _T("<>"), false);
                test_string("CompileOptionsBase::AddLinkLib", opts, "testA<>testB<>testNew");
                debugTarget.ReplaceLinkLib(_T("testB"), _T("testReplace"));
                opts = GetStringFromArray(debugTarget.GetLinkLibs(), _T("<>"), false);
                test_string("CompileOptionsBase::ReplaceLinkLib", opts,
                            "testA<>testReplace<>testNew");
                debugTarget.RemoveLinkLib(_T("testReplace"));
                opts = GetStringFromArray(debugTarget.GetLinkLibs(), _T("<>"), false);
                test_string("CompileOptionsBase::RemoveLinkLib", opts, "testA<>testNew");
            }
            {
                test_equal("CompileOptionsBase::GetCompilerOptions empty",
                           debugTarget.GetCompilerOptions().GetCount(), 0);
                debugTarget.SetCompilerOptions(GetArrayFromString(_T("-O0;-g"), _T(";"), true));
                local opts = GetStringFromArray(debugTarget.GetCompilerOptions(), _T("<>"), false);
                test_string("CompileOptionsBase::SetCompilerOptions", opts, "-O0<>-g");
                debugTarget.AddCompilerOption(_T("-newOpt"));
                opts = GetStringFromArray(debugTarget.GetCompilerOptions(), _T("<>"), false);
                test_string("CompileOptionsBase::AddCompilerOption", opts, "-O0<>-g<>-newOpt");
                debugTarget.ReplaceCompilerOption(_T("-g"), _T("-replace"));
                opts = GetStringFromArray(debugTarget.GetCompilerOptions(), _T("<>"), false);
                test_string("CompileOptionsBase::ReplaceCompilerOption", opts,
                            "-O0<>-replace<>-newOpt");
                debugTarget.RemoveCompilerOption(_T("-replace"));
                opts = GetStringFromArray(debugTarget.GetCompilerOptions(), _T("<>"), false);
                test_string("CompileOptionsBase::RemoveCompilerOption", opts, "-O0<>-newOpt");
            }
            {
                test_equal("CompileOptionsBase::GetResourceCompilerOptions empty",
                           debugTarget.GetResourceCompilerOptions().GetCount(), 0);
                debugTarget.SetResourceCompilerOptions(GetArrayFromString(_T("-resource1;-resource2"), _T(";"), true));
                local opts = GetStringFromArray(debugTarget.GetResourceCompilerOptions(), _T("<>"), false);
                test_string("CompileOptionsBase::SetResourceCompilerOptions", opts,
                            "-resource1<>-resource2");
                debugTarget.AddResourceCompilerOption(_T("-resourceNew"));
                opts = GetStringFromArray(debugTarget.GetResourceCompilerOptions(), _T("<>"), false);
                test_string("CompileOptionsBase::AddResourceCompilerOption", opts,
                            "-resource1<>-resource2<>-resourceNew");
                debugTarget.ReplaceResourceCompilerOption(_T("-resource2"), _T("-resourceReplace"));
                opts = GetStringFromArray(debugTarget.GetResourceCompilerOptions(), _T("<>"), false);
                test_string("CompileOptionsBase::ReplaceResourceCompilerOption", opts,
                            "-resource1<>-resourceReplace<>-resourceNew");
                debugTarget.RemoveResourceCompilerOption(_T("-resourceReplace"));
                opts = GetStringFromArray(debugTarget.GetResourceCompilerOptions(), _T("<>"), false);
                test_string("CompileOptionsBase::RemoveResourceCompilerOption", opts,
                            "-resource1<>-resourceNew");
            }
            {
                test_equal("CompileOptionsBase::GetIncludeDirs empty",
                           debugTarget.GetIncludeDirs().GetCount(), 0);
                debugTarget.SetIncludeDirs(GetArrayFromString(_T("dir1;dir2"), _T(";"), true));
                local opts = GetStringFromArray(debugTarget.GetIncludeDirs(), _T("<>"), false);
                test_string("CompileOptionsBase::SetIncludeDirs", opts, "dir1<>dir2");
                debugTarget.AddIncludeDir(_T("dirNew"));
                opts = GetStringFromArray(debugTarget.GetIncludeDirs(), _T("<>"), false);
                test_string("CompileOptionsBase::AddIncludeDir", opts, "dir1<>dir2<>dirNew");
                debugTarget.ReplaceIncludeDir(_T("dir2"), _T("dirReplace"));
                opts = GetStringFromArray(debugTarget.GetIncludeDirs(), _T("<>"), false);
                test_string("CompileOptionsBase::ReplaceIncludeDir", opts, "dir1<>dirReplace<>dirNew");
                debugTarget.RemoveIncludeDir(_T("dirReplace"));
                opts = GetStringFromArray(debugTarget.GetIncludeDirs(), _T("<>"), false);
                test_string("CompileOptionsBase::RemoveIncludeDir", opts, "dir1<>dirNew");
            }
            {
                test_equal("CompileOptionsBase::GetResourceIncludeDirs empty",
                           debugTarget.GetResourceIncludeDirs().GetCount(), 0);
                debugTarget.SetResourceIncludeDirs(GetArrayFromString(_T("rdir1;rdir2"), _T(";"),
                                                                      true));
                local opts = GetStringFromArray(debugTarget.GetResourceIncludeDirs(), _T("<>"),
                                                false);
                test_string("CompileOptionsBase::SetResourceIncludeDirs", opts, "rdir1<>rdir2");
                debugTarget.AddResourceIncludeDir(_T("rdirNew"));
                opts = GetStringFromArray(debugTarget.GetResourceIncludeDirs(), _T("<>"), false);
                test_string("CompileOptionsBase::AddResourceIncludeDir", opts,
                            "rdir1<>rdir2<>rdirNew");
                debugTarget.ReplaceResourceIncludeDir(_T("rdir2"), _T("rdirReplace"));
                opts = GetStringFromArray(debugTarget.GetResourceIncludeDirs(), _T("<>"), false);
                test_string("CompileOptionsBase::ReplaceResourceIncludeDir", opts,
                            "rdir1<>rdirReplace<>rdirNew");
                debugTarget.RemoveResourceIncludeDir(_T("rdirReplace"));
                opts = GetStringFromArray(debugTarget.GetResourceIncludeDirs(), _T("<>"), false);
                test_string("CompileOptionsBase::RemoveResourceIncludeDir", opts,
                            "rdir1<>rdirNew");
            }
            {
                test_equal("CompileOptionsBase::GetLibDirs empty",
                           debugTarget.GetLibDirs().GetCount(), 0);
                debugTarget.SetLibDirs(GetArrayFromString(_T("ldir1;ldir2"), _T(";"), true));
                local opts = GetStringFromArray(debugTarget.GetLibDirs(), _T("<>"), false);
                test_string("CompileOptionsBase::SetLibDirs", opts, "ldir1<>ldir2");
                debugTarget.AddLibDir(_T("ldirNew"));
                opts = GetStringFromArray(debugTarget.GetLibDirs(), _T("<>"), false);
                test_string("CompileOptionsBase::AddLibDir", opts, "ldir1<>ldir2<>ldirNew");
                debugTarget.ReplaceLibDir(_T("ldir2"), _T("ldirReplace"));
                opts = GetStringFromArray(debugTarget.GetLibDirs(), _T("<>"), false);
                test_string("CompileOptionsBase::ReplaceLibDir", opts,
                            "ldir1<>ldirReplace<>ldirNew");
                debugTarget.RemoveLibDir(_T("ldirReplace"));
                opts = GetStringFromArray(debugTarget.GetLibDirs(), _T("<>"), false);
                test_string("CompileOptionsBase::RemoveLibDir", opts, "ldir1<>ldirNew");
            }
            {
                test_equal("CompileOptionsBase::GetCommandsBeforeBuild empty",
                           debugTarget.GetCommandsBeforeBuild().GetCount(), 0);
                debugTarget.SetCommandsBeforeBuild(GetArrayFromString(_T("cmdBefore1;cmdBefore2"), _T(";"), true));
                local opts = GetStringFromArray(debugTarget.GetCommandsBeforeBuild(), _T("<>"), false);
                test_string("CompileOptionsBase::SetCommandsBeforeBuild", opts, "cmdBefore1<>cmdBefore2");
                debugTarget.AddCommandsBeforeBuild(_T("cmdBeforeNew"));
                opts = GetStringFromArray(debugTarget.GetCommandsBeforeBuild(), _T("<>"), false);
                test_string("CompileOptionsBase::AddCommandsBeforeBuild", opts,
                            "cmdBefore1<>cmdBefore2<>cmdBeforeNew");
                debugTarget.RemoveCommandsBeforeBuild(_T("cmdBefore2"));
                opts = GetStringFromArray(debugTarget.GetCommandsBeforeBuild(), _T("<>"), false);
                test_string("CompileOptionsBase::RemoveCommandsBeforeBuild", opts,
                            "cmdBefore1<>cmdBeforeNew");
            }
            {
                test_equal("CompileOptionsBase::GetCommandsAfterBuild empty",
                           debugTarget.GetCommandsAfterBuild().GetCount(), 0);
                debugTarget.SetCommandsAfterBuild(GetArrayFromString(_T("cmdAfter1;cmdAfter2"), _T(";"), true));
                local opts = GetStringFromArray(debugTarget.GetCommandsAfterBuild(), _T("<>"), false);
                test_string("CompileOptionsBase::SetCommandsAfterBuild", opts, "cmdAfter1<>cmdAfter2");
                debugTarget.AddCommandsAfterBuild(_T("cmdAfterNew"));
                opts = GetStringFromArray(debugTarget.GetCommandsAfterBuild(), _T("<>"), false);
                test_string("CompileOptionsBase::AddCommandsAfterBuild", opts,
                            "cmdAfter1<>cmdAfter2<>cmdAfterNew");
                debugTarget.RemoveCommandsAfterBuild(_T("cmdAfter2"));
                opts = GetStringFromArray(debugTarget.GetCommandsAfterBuild(), _T("<>"), false);
                test_string("CompileOptionsBase::RemoveCommandsAfterBuild", opts,
                            "cmdAfter1<>cmdAfterNew");
            }
            {
                test_equal("CompileOptionsBase::GetBuildScripts empty",
                           debugTarget.GetBuildScripts().GetCount(), 0);
                debugTarget.SetBuildScripts(GetArrayFromString(_T("script1;script2"), _T(";"), true));
                local opts = GetStringFromArray(debugTarget.GetBuildScripts(), _T("<>"), false);
                test_string("CompileOptionsBase::SetBuildScripts", opts, "script1<>script2");
                debugTarget.AddBuildScript(_T("scriptNew"));
                opts = GetStringFromArray(debugTarget.GetBuildScripts(), _T("<>"), false);
                test_string("CompileOptionsBase::AddBuildScript", opts,
                            "script1<>script2<>scriptNew");
                debugTarget.RemoveBuildScript(_T("script2"));
                opts = GetStringFromArray(debugTarget.GetBuildScripts(), _T("<>"), false);
                test_string("CompileOptionsBase::RemoveBuildScript", opts, "script1<>scriptNew");
            }

            test_true("CompileOptionsBase::GetModified", debugTarget.GetModified());
            debugTarget.SetModified(false);
            test_false("CompileOptionsBase::SetModified", debugTarget.GetModified());

            test_false("CompileOptionsBase::GetAlwaysRunPostBuildSteps",
                       debugTarget.GetAlwaysRunPostBuildSteps());
            debugTarget.SetAlwaysRunPostBuildSteps(true);
            test_true("CompileOptionsBase::SetAlwaysRunPostBuildSteps",
                      debugTarget.GetAlwaysRunPostBuildSteps());

            debugTarget.SetVar(_T("var1"), _T("value1"), false);
            debugTarget.SetVar(_T("var2"), _T("value2"), false);
            test_string("CompileOptionsBase::SetVar1", debugTarget.GetVar(_T("var1")), "value1");
            test_string("CompileOptionsBase::SetVar2", debugTarget.GetVar(_T("var2")), "value2");
            test_true("CompileOptionsBase::UnsetVar", debugTarget.UnsetVar(_T("var1")));
            test_string("CompileOptionsBase::GetVar2", debugTarget.GetVar(_T("var2")), "value2");
            debugTarget.UnsetAllVars();
            test_string("CompileOptionsBase::GetVar1", debugTarget.GetVar(_T("var1")), "");
            test_string("CompileOptionsBase::GetVar2", debugTarget.GetVar(_T("var2")), "");
        }

        test_true("ProjectBuildTarget type", debugTarget instanceof ProjectBuildTarget);
        test_true("ProjectBuildTarget base0 type", debugTarget instanceof CompileTargetBase);
        test_true("ProjectBuildTarget base1 type", debugTarget instanceof CompileOptionsBase);

        local releaseTarget = project.AddBuildTarget(_T("Release"));
        test_false("cbProject::AddBuildTarget non null 1", IsNull(releaseTarget));

        test_equal("cbProject::GetFilesCount empty", project.GetFilesCount(), 0);

        projectMgr.AddFileToProject(makePath(tempFolder, _T("file1.cpp")), project, 0);
        projectMgr.AddFileToProject(makePath(tempFolder, _T("file1.cpp")), project, 1);

        projectMgr.RebuildTree();

        test_equal("cbProject::GetFilesCount after 1 file", project.GetFilesCount(), 1);

        {
            local file = project.GetFile(0);
            test_false("cbProject::GetFile non null", IsNull(file));

            local strTargets = GetStringFromArray(file.GetBuildTargets(), _T(";"), false);
            test_string("ProjectFile::GetBuildTargets", strTargets, "Debug;Release");

            test_equal("ProjectFile::GetParentProject", file.GetParentProject(), project);

            local test_targets = function(message, file, expected)
            {
                local strTargets = GetStringFromArray(file.GetBuildTargets(), _T(";"), false);
                test_string(message, strTargets, expected);
            }

            file.RemoveBuildTarget(_T("Debug"));
            test_targets("ProjectFile::RemoveBuildTarget", file, "Release");

            file.RenameBuildTarget(_T("Release"), _T("Debug"));
            test_targets("ProjectFile::RenameBuildTarget", file, "Debug");

            file.AddBuildTarget(_T("Release"));
            test_targets("ProjectFile::AddBuildTarget", file, "Debug;Release");

            local objExt = ".o"; // FIXME (squirrel) Make this Multi-OS/Multi-Compiler

            test_string("ProjectFile::GetBaseName", file.GetBaseName(), "file1");
            test_string("ProjectFile::GetObjName", file.GetObjName(), "file1" + objExt);
            file.SetObjName(_T("changed.obj1"));
            test_string("ProjectFile::SetObjName", file.GetObjName(), "changed" + objExt);

            local compilerId = _T("gcc");
            test_false("ProjectFile::GetUseCustomBuildCommand",
                       file.GetUseCustomBuildCommand(compilerId));
            file.SetUseCustomBuildCommand(compilerId, true);
            test_true("ProjectFile::SetUseCustomBuildCommand",
                      file.GetUseCustomBuildCommand(compilerId));

            test_string("ProjectFile::GetCustomBuildCommand",
                        file.GetCustomBuildCommand(compilerId), "");
            file.SetCustomBuildCommand(compilerId, _T("<custom command>"));
            test_string("ProjectFile::SetCustomBuildCommand",
                        file.GetCustomBuildCommand(compilerId), "<custom command>");

            test_string("ProjectFile::file get", file.file.GetFullPath(::wxPATH_NATIVE),
                        makePath(tempFolder, _T("file1.cpp")));
            test_string("ProjectFile::relativeFilename", file.relativeFilename, "file1.cpp");
            test_string("ProjectFile::relativeToCommonTopLevelPath",
                        file.relativeToCommonTopLevelPath, "file1.cpp");

            test_true("ProjectFile::compile get", file.compile);
            file.compile = false;
            test_false("ProjectFile::compile set", file.compile);

            test_true("ProjectFile::link get", file.link);
            file.link = false;
            test_false("ProjectFile::link set", file.link);

            test_equal("ProjectFile::weight get", file.weight, 50);
            file.weight = 12;
            test_equal("ProjectFile::weight set", file.weight, 12);

            test_string("ProjectFile::compilerVar get", file.compilerVar, "CPP");
            file.compilerVar = _T("TEST");
            test_string("ProjectFile::compilerVar set", file.compilerVar, "TEST");

            local strTargets = GetStringFromArray(file.buildTargets, _T(";"), false);
            test_string("ProjectFile::buildTargets get", strTargets, "Debug;Release");
        }

        // Cleanup. Must happen here.
        test_true("ProjectManager::CloseProject", projectMgr.CloseProject(project, true, true));

        {
            local info = PluginInfo();
            info.name = _T("test_name");
            info.title = _T("test_title");
            info.version = _T("test_version");
            info.description = _T("test_description");
            info.author = _T("test_author");
            info.authorEmail = _T("test_authorEmail");
            info.authorWebsite = _T("test_authorWebsite");
            info.thanksTo = _T("test_thanksTo");
            info.license = _T("test_license");

            test_string("PluginInfo name", info.name, "test_name");
            test_string("PluginInfo title", info.title, "test_title");
            test_string("PluginInfo version", info.version, "test_version");
            test_string("PluginInfo description", info.description, "test_description");
            test_string("PluginInfo author", info.author, "test_author");
            test_string("PluginInfo authorEmail", info.authorEmail, "test_authorEmail");
            test_string("PluginInfo authorWebsite", info.authorWebsite, "test_authorWebsite");
            test_string("PluginInfo thanksTo", info.thanksTo, "test_thanksTo");
            test_string("PluginInfo license", info.license, "test_license");
        }

        print_test_result();
        ::print("======= Test SDK Classes function END ======= \n");
    }
}
